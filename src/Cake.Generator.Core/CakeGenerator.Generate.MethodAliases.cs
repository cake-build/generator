// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

namespace Cake.Generator;

public partial class CakeGenerator
{
    private static string GenerateMethodAliases(List<MethodInfo> methods)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("public static partial class Program");
        sb.AppendLine("{");

        sb.AppendLine();

        // Group methods by assembly name
        var assemblyGroups = GroupMethodsByAssemblyName(methods);
        GenerateNestedClasses(sb, assemblyGroups, 1, false);

        sb.AppendLine("}");
        return sb.ToString();
    }

    private static void GenerateMethod(StringBuilder sb, MethodInfo methodInfo, int indentLevel)
    {
        const string TrueValue = "true";
        const string FalseValue = "false";
        var method = methodInfo.Symbol;
        var indent = new string(' ', indentLevel * 4);

        // Generate XML documentation
        GenerateXmlDocumentation(sb, method, indent);

        // Method signature
        var returnType = method.ReturnType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
        var parameters = method.Parameters.Skip(1); // Skip context parameter

        // Handle naming conflicts where method name equals containing class name
        var methodName = method.Name;
        var containingTypeName = method.ContainingType.Name;
        if (methodName == containingTypeName)
        {
            methodName = $"{method.Name}Method";
        }

        sb.Append($"{indent}public static {returnType} {methodName}");

        if (method.TypeParameters.Length > 0)
        {
            sb.Append("<");
            sb.Append(string.Join(", ", method.TypeParameters.Select(tp => tp.Name)));
            sb.Append(">");
        }

        sb.Append("(");
        sb.Append(string.Join(", ", parameters.Select(p =>
        {
            var paramType = p.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            var paramName = p.Name;

            var result = new StringBuilder();

            // Add parameter modifiers
            switch (p.RefKind)
            {
                case RefKind.Out:
                    result.Append("out ");
                    break;
                case RefKind.Ref:
                    result.Append("ref ");
                    break;
                case RefKind.In:
                    result.Append("in ");
                    break;
            }

            // Handle params modifier
            if (p.IsParams)
            {
                result.Append("params ");
            }

            // Check if parameter has null default value and make it nullable
            if (p.HasExplicitDefaultValue && p.ExplicitDefaultValue == null && !paramType.EndsWith("?"))
            {
                paramType += "?";
            }

            result.Append(paramType).Append(" ").Append(paramName);

            if (p.HasExplicitDefaultValue)
            {
                result.Append(" = ");
                switch (p.ExplicitDefaultValue)
                {
                    case null:
                        result.Append("null");
                        break;
                    case string str:
                        result.Append($"\"{str}\"");
                        break;
                    case bool b:
                        result.Append(b ? TrueValue : FalseValue);
                        break;
                    default:
                        result.Append(p.ExplicitDefaultValue);
                        break;
                }
            }

            return result.ToString();
        })));
        sb.AppendLine(")");

        // Method body
        var containingType = method.ContainingType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
        sb.Append($"{indent}    => {containingType}.{method.Name}");

        if (method.TypeParameters.Length > 0)
        {
            sb.Append("<");
            sb.Append(string.Join(", ", method.TypeParameters.Select(tp => tp.Name)));
            sb.Append(">");
        }

        sb.Append("(Context");

        // Add remaining parameters with proper modifiers
        foreach (var param in parameters)
        {
            sb.Append(", ");

            // Add parameter modifiers for the call
            if (param.RefKind == RefKind.Out)
            {
                sb.Append("out ");
            }
            else if (param.RefKind == RefKind.Ref)
            {
                sb.Append("ref ");
            }
            else if (param.RefKind == RefKind.In)
            {
                sb.Append("in ");
            }

            sb.Append(param.Name);
        }

        sb.AppendLine(");");
        sb.AppendLine();
    }
}
