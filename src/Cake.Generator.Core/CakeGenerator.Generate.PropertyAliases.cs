// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

namespace Cake.Generator;

public partial class CakeGenerator
{
    private static string GeneratePropertyAliases(List<MethodInfo> properties)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("public static partial class Program");
        sb.AppendLine("{");

        // Group properties by assembly name
        var assemblyGroups = GroupMethodsByAssemblyName(properties);
        GenerateNestedClasses(sb, assemblyGroups, 1, true);

        sb.AppendLine("}");
        return sb.ToString();
    }

    private static void GenerateProperty(StringBuilder sb, MethodInfo methodInfo, int indentLevel)
    {
        var method = methodInfo.Symbol;
        var indent = new string(' ', indentLevel * 4);

        // Generate XML documentation
        GenerateXmlDocumentation(sb, method, indent);

        // Property signature
        var returnType = method.ReturnType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
        sb.AppendLine($"{indent}public static {returnType} {method.Name}");

        // Property body
        var containingType = method.ContainingType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);

        if (methodInfo.IsCached)
        {
            // Generate cached property with backing field
            var fieldName = $"_{method.Name}";
            sb.AppendLine($"{indent}    => {fieldName} ??= {containingType}.{method.Name}(Context);");
        }
        else
        {
            // Generate non-cached property
            sb.AppendLine($"{indent}    => {containingType}.{method.Name}(Context);");
        }

        sb.AppendLine();
    }
}
